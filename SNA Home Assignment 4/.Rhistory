graph.colors = c("blue", "green", "orange", "red")
par(mfrow = c(3, 1))
for (sim.name in names(sims)) {
plot.simulation(sims[[sim.name]], graph.colors, kind = "NS")
}
print.descriptives.for.graphs = function(graphs.list,
include.density = T,
include.diameter = T,
include.clustering.coefficient = T,
include.cluster.count = T) {
tbl = NULL
for(g.name in names(graphs.list)) {
g = graphs.list[[g.name]]
tbl.column = matrix()
colnames(tbl.column) = g$name
rownames(tbl.column) = c(NA)
if (include.density) {
g.dens = graph.density(g)
tbl.column = rbind(tbl.column,
g.dens)
rownames(tbl.column)[length(rownames(tbl.column))] = "Density"
}
if (include.diameter) {
g.diam = diameter(g)
tbl.column = rbind(tbl.column,
g.diam)
rownames(tbl.column)[length(rownames(tbl.column))] = "Diameter"
}
if (include.clustering.coefficient) {
g.cc = transitivity(g, type = "global")
tbl.column = rbind(tbl.column,
g.cc)
rownames(tbl.column)[length(rownames(tbl.column))] = "Clustering Coefficient"
}
if (include.cluster.count) {
g.c.no = clusters(g)$no
tbl.column = rbind(tbl.column,
g.c.no)
rownames(tbl.column)[length(rownames(tbl.column))] = "Cluster Count"
}
if (is.null(tbl)) {
tbl = tbl.column
} else {
tbl = cbind(tbl,
tbl.column)
}
}
tbl = tbl[-1, ]
tbl = xtable(tbl,
caption = "Graph Comparison")
digits(tbl) = c(0, rep(4, length(graphs.list)))
align(tbl) = paste0("r",
paste0(rep("|c", length(graphs.list)),
collapse = ""))
print(tbl,
type = "latex",
floating = T,
include.rownames = T,
latex.environments = "center",
caption.placement = "top")
}
print.descriptives.for.graphs(gs)
library(igraph)
library(EpiModel)
library(xtable)
options(xtable.comment = F)
print.descriptives.for.graphs = function(graphs.list,
include.density = T,
include.diameter = T,
include.clustering.coefficient = T,
include.cluster.count = T) {
tbl = NULL
for(g.name in names(graphs.list)) {
g = graphs.list[[g.name]]
tbl.column = matrix()
colnames(tbl.column) = g$name
rownames(tbl.column) = c(NA)
if (include.density) {
g.dens = graph.density(g)
tbl.column = rbind(tbl.column,
g.dens)
rownames(tbl.column)[length(rownames(tbl.column))] = "Density"
}
if (include.diameter) {
g.diam = diameter(g)
tbl.column = rbind(tbl.column,
g.diam)
rownames(tbl.column)[length(rownames(tbl.column))] = "Diameter"
}
if (include.clustering.coefficient) {
g.cc = transitivity(g, type = "global")
tbl.column = rbind(tbl.column,
g.cc)
rownames(tbl.column)[length(rownames(tbl.column))] = "Clustering Coefficient"
}
if (include.cluster.count) {
g.c.no = clusters(g)$no
tbl.column = rbind(tbl.column,
g.c.no)
rownames(tbl.column)[length(rownames(tbl.column))] = "Cluster Count"
}
if (is.null(tbl)) {
tbl = tbl.column
} else {
tbl = cbind(tbl,
tbl.column)
}
}
tbl = tbl[-1, ]
tbl = xtable(tbl,
caption = "Graph Comparison")
digits(tbl) = c(0, rep(4, length(graphs.list)))
align(tbl) = paste0("r",
paste0(rep("|c", length(graphs.list)),
collapse = ""))
print(tbl,
type = "latex",
floating = T,
include.rownames = T,
latex.environments = "center",
caption.placement = "top")
}
print.descriptives.for.graphs(gs)
par(mfrow = c(3, 1))
for (sim.name in names(sims)) {
plot.simulation(sims[[sim.name]], graph.colors, kind = "NI")
}
par(mfrow = c(3, 1))
for (sim.name in names(sims)) {
plot.simulation(sims[[sim.name]], graph.colors, kind = "NR")
}
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
plot(sim$er)
plot(sim$ba, color="palegoldenrod", median_color="gold", quantile_color="gold")
plot(sim$ws, color="pink", median_color="red", quantile_color="red")
x.max <- max(sapply(sapply(sim, time_bins), max))
y.max <- 1.05 * max(sapply(sapply(sim, function(x) median(x)[["NI"]]), max, na.rm=TRUE))
plot(time_bins(sim$er), median(sim$er)[["NI"]], type="l", lwd=2, col="blue", xlim=c(0, x.max), ylim=c(0, y.max), xlab="Time", ylab=expression(N[I](t)))
lines(time_bins(sim$ba), median(sim$ba)[["NI"]], lwd=2, col="gold")
lines(time_bins(sim$ws), median(sim$ws)[["NI"]],lwd=2, col="red")
legend("topright", c("ER", "BA", "WS"),col=c("blue", "gold", "red"), lty=1)
prop.test(c(1200,780), c(1500,1000),alternative = "less")
prop.test(c(1200,780), c(1500,1000),alternative = "greater")
prop.test(c(1200,780), c(1500,1000),alternative = "greater", conf.level = .05)
prop.test(c(1200,780), c(1500,1000),alternative = "greater", conf.level = .95)
prop.test(c(1200,780), c(1500,1000),alternative = "less", conf.level = .95)
prop.test(c(1200,780), c(1500,1000),alternative = "two-sided", conf.level = .95)
prop.test(c(1200,780), c(1500,1000),alternative = "two.sided", conf.level = .95)
prop.test(c(1200,80), c(1500,1000),alternative = "t", conf.level = .95)
prop.test(c(1200,80), c(1500,1000),alternative = "g", conf.level = .95)
prop.test(c(1200,80), c(1500,1000),alternative = "l", conf.level = .95)
prop.test(c(1200,780), c(1500,1000),alternative = "l", conf.level = .95)
prop.test(c(1200,780), c(1500,1000),alternative = "t", conf.level = .95)
prop.test(c(1200,780), c(1500,1000),alternative = "l", conf.level = .99)
prop.test(c(1200,780), c(1500,1000),alternative = "t", conf.level = .99)
prop.test(c(1200,780), c(1500,1000),alternative = "t", conf.level = .95)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
gl$names
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
gl$name
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
names(gl)
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
graph_attr_names(gl)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
list.network.attributes(gl)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
name(gl)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
names(gl)
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba$name = "Barabasi game"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$er$name = "Erdos reyni game"
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$ws.name = "Watts Strogatz game"
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
names(gl)
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba.name = "Barabasi game"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$er$name = "Erdos reyni game"
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$ws.name = "Watts Strogatz game"
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt.name = "Net graph"
names(gl)
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba$name = "Barabasi game"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$er$name = "Erdos reyni game"
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$ws.name = "Watts Strogatz game"
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt.name = "Net graph"
names(gl)
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba$name = "Barabasi game"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$er$name = "Erdos reyni game"
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$ws$name = "Watts Strogatz game"
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt.name = "Net graph"
names(gl)
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba$name = "Barabasi game"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$er$name = "Erdos reyni game"
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$ws$name = "Watts Strogatz game"
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$nt$name = "Net graph"
names(gl)
#plot(gl$nt)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
func = function(glist, beta, gamma,  ntrials){
sim <- lapply(glist, sir, beta=beta, gamma=gamma, no.sim=ntrials)
return(sim)
}
x = list()
append(x,func(gl, beta, gamma, ntrials))
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
func = function(el, b, g,  no.sim){
sim <- lapply(el, sir, b=beta, g=gamma, no.sim=ntrials)
return(sim)
}
x = list()
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
func = function(el, b, g,  no.sim){
sim <- lapply(el, sir, b=beta, g=gamma, no.sim=ntrials)
return(sim)
}
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(el, sir, b=beta, g=gamma, no.sim=ntrials)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(gl, sir, b=beta, g=gamma, no.sim=ntrials)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(gl$ba, sir, b=beta, g=gamma, no.sim=ntrials)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
typeof(sim)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
sim <- lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
typeof(sim$ba)
beta <- 2
gamma <- 4
ntrials <- 100
# Running function sir for each element of list gl (list with graphs)
iterations = list()
sim <- lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
func = function(gl, beta, gamma, no.sim, V, E){
sim = lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
iterations = append(iterations, sim)
return(iterations)
}
# Running function sir for each element of list gl (list with graphs)
iterations = list()
func = function(gl, beta, gamma, no.sim){
sim = lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials)
iterations = append(iterations, sim)
return(iterations)
}
beta <- 2
gamma <- 4
ntrials <- 100
func(gl, beta, gamma, no.sim=ntrials)
beta <- 2
gamma <- 4
ntrials <- 100
sim = lapply(gl$ba, sir, beta=beta, gamma=gamma, no.sim=ntrials)
beta <- 2
gamma <- 4
ntrials <- 100
sim = lapply(gl , sir, beta=beta, gamma=gamma, no.sim=ntrials)
sim
l = list("a"=1, "b"=4)
l
gl
for (i in gl){}
for (i in gl){}
for (i in gl){
print(i)
}
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
#plot(gl$nt)
for (i in gl){
print(i)
}
for (i in gl$name){
print(i)
}
for (i in gl$names){
print(i)
}
for (name in names(gl)){
print(name)
}
sim_func = list( "barabasi game" = lapply(list(gl$ba) , sir, beta=beta, gamma=gamma, no.sim=ntrials))
sim_func = list( "barabasi game" = lapply(gl$ba , sir, beta=beta, gamma=gamma, no.sim=ntrials))
simulations = list( "barabasi game" = lapply(as.list(gl$ba) , sir, beta=beta, gamma=gamma, no.sim=ntrials))
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl[0]
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$ba
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba$name = "barabasi"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$ba
#plot(gl$nt)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$ba$name = "barabasi_game"
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
gl$ba
#plot(gl$nt)
for name in names(gl){
for (name in names(gl)){
simulations = list( name = lapply(gl$ba , sir, beta=beta, gamma=gamma, no.sim=ntrials))
}
for (name in names(gl)){
simulations = list( name = lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials))
}
for (name in names(gl)){
simulations = list( name = lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials))
}
simulations$name
for (name in seq(names(gl))){
simulations = list( name = lapply(gl, sir, beta=beta, gamma=gamma, no.sim=ntrials))
}
for (name in seq(names(gl))){
simulations = list(  = lapply(gl[name], sir, beta=beta, gamma=gamma, no.sim=ntrials))
for (name in seq(names(gl))){
simulations = list( gl[name] = lapply(gl[name], sir, beta=beta, gamma=gamma, no.sim=ntrials))
func_sim = function(graph_list, beta, gamma, ntrials){
simulations = lapply(graph_list, sir, beta=beta, gamma=gamma, no.sim=ntrials)
return(simulations)
}
simulations = list("simulation_1" = func_sim(gl, beta=4, gamma = 8, no.sim = 100),
"simulation_2" = func_sim(gl, beta=6, gamma = 6, no.sim = 500),
"simulation_3" = func_sim(gl, beta=8, gamma = 2, no.sim = 1000))
func_sim = function(graph_list, beta, gamma, ntrials){
simulations = lapply(graph_list, sir, beta=beta, gamma=gamma, no.sim=ntrials)
return(simulations)
}
func_sim(gl, beta=4, gamma = 8, no.sim = 100)
func_sim = function(graph_list, beta, gamma, ntrials){
simulations = lapply(graph_list, sir, beta=beta, gamma=gamma, no.sim = ntrials)
return(simulations)
}
simulations = list("simulation_1" = func_sim(gl, beta=4, gamma = 8, ntrials = 100),
"simulation_2" = func_sim(gl, beta=6, gamma = 6, ntrials = 500),
"simulation_3" = func_sim(gl, beta=8, gamma = 2, ntrials = 1000))
library(igraph)
gl <- list()
gl$ba <- barabasi.game(n = 100,m = 12 , directed=FALSE)
gl$er <- erdos.renyi.game(n = 250, p.or.m = 0.02, type=c("gnp"))
gl$ws <- watts.strogatz.game(dim = 1, size = 1000, nei = 3, p = 0.01)
gl$nt = read_graph("Net.txt", directed=FALSE)
gl$nt = delete.vertices(gl$nt, degree(gl$nt) == 0)
# Running function sir for each element of list gl (list with graphs)
func_sim = function(graph_list, beta, gamma, ntrials){
simulations = lapply(graph_list, sir, beta=beta, gamma=gamma, no.sim = ntrials)
return(simulations)
}
simulations = list()
simulations$simulation_1 = func_sim(gl, beta=4, gamma = 8, ntrials = 100)
simulations$simulation_2 = func_sim(gl, beta=6, gamma = 6, ntrials = 500)
simulations$simulation_3 = func_sim(gl, beta=8, gamma = 2, ntrials = 1000)
func_sim = function(g, beta, gamma, ntrials){
simulations = lapply(graph_list, sir, beta=beta, gamma=gamma, no.sim = ntrials)
return(simulations)
}
simulations = list()
simulations$simulation_1 = func_sim(gl, beta=4, gamma = 8, ntrials = 100)
func_sim = function(g, beta, gamma, ntrials){
simulations = lapply(g, sir, beta=beta, gamma=gamma, no.sim = ntrials)
return(simulations)
}
simulations = list()
simulations$simulation_1 = func_sim(gl, beta=4, gamma = 8, ntrials = 100)
simulations$simulation_2 = func_sim(gl, beta=6, gamma = 6, ntrials = 500)
simulations$simulation_3 = func_sim(gl, beta=8, gamma = 2, ntrials = 1000)
plot(sim$er)
plot(sim$ba, color="palegoldenrod", median_color="gold", quantile_color="gold")
plot(sim$ws, color="pink", median_color="red", quantile_color="red")
x.max <- max(sapply(sapply(sim, time_bins), max))
y.max <- 1.05 * max(sapply(sapply(sim, function(x) median(x)[["NI"]]), max, na.rm=TRUE))
plot(time_bins(sim$er), median(sim$er)[["NI"]], type="l", lwd=2, col="blue", xlim=c(0, x.max), ylim=c(0, y.max), xlab="Time", ylab=expression(N[I](t)))
lines(time_bins(sim$ba), median(sim$ba)[["NI"]], lwd=2, col="gold")
lines(time_bins(sim$ws), median(sim$ws)[["NI"]],lwd=2, col="red")
legend("topright", c("ER", "BA", "WS"),col=c("blue", "gold", "red"), lty=1)
simulations[[0]]
simulations[[1]]
